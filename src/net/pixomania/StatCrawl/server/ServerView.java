/*
 * ServerView.java
 *
 * Created on 2011-apr-08, 11:07:08
 */
package net.pixomania.StatCrawl.server;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Server;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import net.pixomania.StatCrawl.db.Db;
import net.pixomania.StatCrawl.db.DbQueue;
import net.pixomania.StatCrawl.db.DbSingleton;
import net.pixomania.StatCrawl.networking.Operation;
import net.pixomania.StatCrawl.networking.Packet;
import net.pixomania.StatCrawl.networking.QueueItem;

/**
 *
 * @author galaxyAbstractor
 */
public class ServerView extends javax.swing.JFrame {
    private PipedInputStream piOut;
    private PipedOutputStream poOut;
    private Server server;
    private DbQueue dbQueue = new DbQueue();
    
    private Preferences prefs = Preferences.userNodeForPackage(ServerView.class);
    private Db db = DbSingleton.getDb();
    static {
       System.setProperty("swing.defaultlaf", "org.pushingpixels.substance.api.skin.SubstanceGeminiLookAndFeel");
    }
    
    private int getPort(){
        try {
            return Integer.parseInt(portField.getText());
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, "Illegal port number");
            tglServerTgl.setSelected(false);
            
        }
        return -1;
    }
    /** Creates new form ServerView */
    public ServerView() {
       initComponents();
       // Misses characters :S
       // Write server output to the applications view
       try {
            // Set up System.out
            piOut = new PipedInputStream();
            poOut = new PipedOutputStream(piOut);
            System.setOut(new PrintStream(poOut, true));
            new Console(piOut).start();
        } catch (IOException ex) {

        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverSettingsWindow = new javax.swing.JFrame();
        mainDbPanel = new javax.swing.JPanel();
        mainDbHostLbl = new javax.swing.JLabel();
        mainDbHostField = new javax.swing.JTextField();
        mainDbPortLbl = new javax.swing.JLabel();
        mainDbPortField = new javax.swing.JTextField();
        mainDbUsernameLbl = new javax.swing.JLabel();
        mainDbUsernameField = new javax.swing.JTextField();
        mainDbPasswordLbl = new javax.swing.JLabel();
        mainDbPasswordPfield = new javax.swing.JPasswordField();
        mainDbDatabaseLbl = new javax.swing.JLabel();
        mainDbDatabaseField = new javax.swing.JTextField();
        serverSettingSaveBtn = new javax.swing.JButton();
        serverSettingCancelBtn = new javax.swing.JButton();
        countryDbPanel = new javax.swing.JPanel();
        countryDbHostLbl = new javax.swing.JLabel();
        countryDbHostField = new javax.swing.JTextField();
        countryDbPortLbl = new javax.swing.JLabel();
        countryDbPortField = new javax.swing.JTextField();
        countryDbUsernameLbl = new javax.swing.JLabel();
        countryDbUsernameField = new javax.swing.JTextField();
        countryDbPasswordLbl = new javax.swing.JLabel();
        countryDbPasswordPfield = new javax.swing.JPasswordField();
        countryDbDatabaseLbl = new javax.swing.JLabel();
        countryDbDatabaseField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jToolBar1 = new javax.swing.JToolBar();
        portLbl = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        tglServerTgl = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        settingsMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();

        serverSettingsWindow.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        serverSettingsWindow.setTitle("Server Settings");
        serverSettingsWindow.setResizable(false);

        mainDbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Database settings"));

        mainDbHostLbl.setText("Host");

        mainDbPortLbl.setText("Port");

        mainDbUsernameLbl.setText("Username");

        mainDbPasswordLbl.setText("Password");

        mainDbDatabaseLbl.setText("Database");

        javax.swing.GroupLayout mainDbPanelLayout = new javax.swing.GroupLayout(mainDbPanel);
        mainDbPanel.setLayout(mainDbPanelLayout);
        mainDbPanelLayout.setHorizontalGroup(
            mainDbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainDbHostLbl)
            .addComponent(mainDbHostField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
            .addComponent(mainDbPortLbl)
            .addComponent(mainDbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(mainDbUsernameLbl)
            .addComponent(mainDbUsernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
            .addComponent(mainDbPasswordLbl)
            .addComponent(mainDbPasswordPfield, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
            .addGroup(mainDbPanelLayout.createSequentialGroup()
                .addComponent(mainDbDatabaseLbl)
                .addContainerGap())
            .addComponent(mainDbDatabaseField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );
        mainDbPanelLayout.setVerticalGroup(
            mainDbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainDbPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainDbHostLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbHostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbPortLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbUsernameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbPasswordLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbPasswordPfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbDatabaseLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainDbDatabaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        serverSettingSaveBtn.setText("Save");
        serverSettingSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverSettingSaveBtnActionPerformed(evt);
            }
        });

        serverSettingCancelBtn.setText("Cancel");
        serverSettingCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverSettingCancelBtnActionPerformed(evt);
            }
        });

        countryDbPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Country Database settings"));
        countryDbPanel.setAlignmentX(0.0F);
        countryDbPanel.setAlignmentY(0.0F);

        countryDbHostLbl.setText("Host");

        countryDbPortLbl.setText("Port");

        countryDbUsernameLbl.setText("Username");

        countryDbPasswordLbl.setText("Password");

        countryDbDatabaseLbl.setText("Database");

        javax.swing.GroupLayout countryDbPanelLayout = new javax.swing.GroupLayout(countryDbPanel);
        countryDbPanel.setLayout(countryDbPanelLayout);
        countryDbPanelLayout.setHorizontalGroup(
            countryDbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(countryDbHostLbl)
            .addComponent(countryDbHostField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
            .addComponent(countryDbPortLbl)
            .addComponent(countryDbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(countryDbUsernameLbl)
            .addComponent(countryDbUsernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
            .addComponent(countryDbPasswordLbl)
            .addComponent(countryDbPasswordPfield, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
            .addGroup(countryDbPanelLayout.createSequentialGroup()
                .addComponent(countryDbDatabaseLbl)
                .addContainerGap())
            .addComponent(countryDbDatabaseField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );
        countryDbPanelLayout.setVerticalGroup(
            countryDbPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(countryDbPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(countryDbHostLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbHostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbPortLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbUsernameLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbUsernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbPasswordLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbPasswordPfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbDatabaseLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countryDbDatabaseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout serverSettingsWindowLayout = new javax.swing.GroupLayout(serverSettingsWindow.getContentPane());
        serverSettingsWindow.getContentPane().setLayout(serverSettingsWindowLayout);
        serverSettingsWindowLayout.setHorizontalGroup(
            serverSettingsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, serverSettingsWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverSettingCancelBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                .addComponent(serverSettingSaveBtn)
                .addContainerGap())
            .addGroup(serverSettingsWindowLayout.createSequentialGroup()
                .addComponent(mainDbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(countryDbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        serverSettingsWindowLayout.setVerticalGroup(
            serverSettingsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serverSettingsWindowLayout.createSequentialGroup()
                .addGroup(serverSettingsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(serverSettingsWindowLayout.createSequentialGroup()
                        .addComponent(mainDbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverSettingCancelBtn))
                    .addGroup(serverSettingsWindowLayout.createSequentialGroup()
                        .addComponent(countryDbPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverSettingSaveBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StatCrawl - Server");

        console.setColumns(20);
        console.setEditable(false);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        portLbl.setText("Port:");
        jToolBar1.add(portLbl);
        jToolBar1.add(portField);

        tglServerTgl.setText("Toggle Server");
        tglServerTgl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tglServerTglActionPerformed(evt);
            }
        });
        jToolBar1.add(tglServerTgl);

        jMenu1.setText("File");

        jMenuItem1.setText("Quit");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(settingsMenuItem);
        jMenu2.add(jSeparator1);

        jMenuItem4.setText("Switch to statview");
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-761)/2, (screenSize.height-338)/2, 761, 338);
    }// </editor-fold>//GEN-END:initComponents

    private void tglServerTglActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tglServerTglActionPerformed
        // Fetch the button from the event
        JToggleButton btn = (JToggleButton) evt.getSource();
        
        // If the button is selected we should run, if the button get's untoggled we should cancel
        if(btn.isSelected()){
            if(db.isConnected()){
                try {
            dbQueue.resetQueue();
            dbQueue.start();
            server = new Server(60000,60000);
            
            int port = getPort();
            if(port == -1) {
                System.out.println("  Illegal port");
            } else {
                Kryo kryo = server.getKryo();

                // Register the classes we are sending
                kryo.register(Packet.class);
                kryo.register(net.pixomania.StatCrawl.networking.Type.class);
                kryo.register(QueueItem.class);
                kryo.register(ArrayList.class);
                kryo.register(LinkedList.class);
                kryo.register(Operation.class);
                
                server.start();
                server.bind(getPort());
                
                server.addListener(new Listener() {
                    @Override
                    public void received (Connection connection, Object object) {
                       if (object instanceof Packet) {
                          Packet request = (Packet)object;
                          Packet p;
                          // What should we respond to the clients?
                          switch(request.type){
                              case FETCH:
                                  // Client wants new links, send him some! Otherwise unhappy customer :'(
                                  p = new Packet();
                                  p.data = db.getFirstTenPending();
                                  p.type = net.pixomania.StatCrawl.networking.Type.TOCRAWL;
                                  connection.sendTCP(p);
                                  break;
                              case QUERIES:
                                  dbQueue.addAll((Collection<QueueItem>) request.data);
                                  break;
                              case PENDING:
                                  db.insertPending((String) request.data);
                                  break;
                          }
                       } 
                    }
                    @Override
                    public void connected (Connection connection) {

                    }
                });

                
            }
        } catch (IOException ex) {
            Logger.getLogger(ServerView.class.getName()).log(Level.SEVERE, null, ex);
        }
            } else {
                JOptionPane.showMessageDialog(rootPane, "There is no database connection. Wrong info in settings menu?");
                btn.setSelected(false);
            }
        } else {
            server.stop();
            dbQueue.stopQueue();
        }
    }//GEN-LAST:event_tglServerTglActionPerformed

    /**
     * Bring up the Settings window when the user clicks the settings menu item
     * @param evt 
     */
    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        // If user already got saved values, use them
        mainDbHostField.setText(prefs.get("mainDbHost", ""));
        mainDbPortField.setText(prefs.getInt("mainDbPort", 3306)+"");
        mainDbUsernameField.setText(prefs.get("mainDbUsername", ""));
        mainDbPasswordPfield.setText(prefs.get("mainDbPassword", ""));
        mainDbDatabaseField.setText(prefs.get("mainDbDatabase", ""));
        
        countryDbHostField.setText(prefs.get("countryDbHost", ""));
        countryDbPortField.setText(prefs.getInt("countryDbPort", 3306)+"");
        countryDbUsernameField.setText(prefs.get("countryDbUsername", ""));
        countryDbPasswordPfield.setText(prefs.get("countryDbPassword", ""));
        countryDbDatabaseField.setText(prefs.get("countryDbDatabase", ""));
        
        serverSettingsWindow.pack();
        serverSettingsWindow.setVisible(true);
    }//GEN-LAST:event_settingsMenuItemActionPerformed

    /**
     * Save the info from the fields using the Preferences API
     * @param evt 
     */
    private void serverSettingSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverSettingSaveBtnActionPerformed
        if(!mainDbHostField.getText().isEmpty() &&
           !mainDbPortField.getText().isEmpty() &&
           !mainDbUsernameField.getText().isEmpty() &&
           !mainDbDatabaseField.getText().isEmpty() &&
           !countryDbHostField.getText().isEmpty() &&
           !countryDbPortField.getText().isEmpty() &&
           !countryDbUsernameField.getText().isEmpty() &&
           !countryDbDatabaseField.getText().isEmpty()) {
                // Save the databases info into the prefs
                prefs.put("mainDbHost", mainDbHostField.getText());
                prefs.putInt("mainDbPort", Integer.parseInt(mainDbPortField.getText()));
                prefs.put("mainDbUsername", mainDbUsernameField.getText());
                prefs.put("mainDbPassword", new String(mainDbPasswordPfield.getPassword()));
                prefs.put("mainDbDatabase", mainDbDatabaseField.getText());

                prefs.put("countryDbHost", countryDbHostField.getText());
                prefs.putInt("countryDbPort", Integer.parseInt(countryDbPortField.getText()));
                prefs.put("countryDbUsername", countryDbUsernameField.getText());
                prefs.put("countryDbPassword", new String(countryDbPasswordPfield.getPassword()));
                prefs.put("countryDbDatabase", countryDbDatabaseField.getText());
                
                // Nullify the db so we can reconnect using the new settings
                DbSingleton.nullify();
                db = DbSingleton.getDb();
                serverSettingsWindow.dispose();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Oops, a field is empty???");
        }
    }//GEN-LAST:event_serverSettingSaveBtnActionPerformed
    
    /**
     * Dispose the window
     * @param evt 
     */
    private void serverSettingCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverSettingCancelBtnActionPerformed
        serverSettingsWindow.dispose();
    }//GEN-LAST:event_serverSettingCancelBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        JFrame.setDefaultLookAndFeelDecorated(true);
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ServerView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea console;
    private javax.swing.JTextField countryDbDatabaseField;
    private javax.swing.JLabel countryDbDatabaseLbl;
    private javax.swing.JTextField countryDbHostField;
    private javax.swing.JLabel countryDbHostLbl;
    private javax.swing.JPanel countryDbPanel;
    private javax.swing.JLabel countryDbPasswordLbl;
    private javax.swing.JPasswordField countryDbPasswordPfield;
    private javax.swing.JTextField countryDbPortField;
    private javax.swing.JLabel countryDbPortLbl;
    private javax.swing.JTextField countryDbUsernameField;
    private javax.swing.JLabel countryDbUsernameLbl;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField mainDbDatabaseField;
    private javax.swing.JLabel mainDbDatabaseLbl;
    private javax.swing.JTextField mainDbHostField;
    private javax.swing.JLabel mainDbHostLbl;
    private javax.swing.JPanel mainDbPanel;
    private javax.swing.JLabel mainDbPasswordLbl;
    private javax.swing.JPasswordField mainDbPasswordPfield;
    private javax.swing.JTextField mainDbPortField;
    private javax.swing.JLabel mainDbPortLbl;
    private javax.swing.JTextField mainDbUsernameField;
    private javax.swing.JLabel mainDbUsernameLbl;
    private static javax.swing.JTextField portField;
    private javax.swing.JLabel portLbl;
    private javax.swing.JButton serverSettingCancelBtn;
    private javax.swing.JButton serverSettingSaveBtn;
    private javax.swing.JFrame serverSettingsWindow;
    private javax.swing.JMenuItem settingsMenuItem;
    private static javax.swing.JToggleButton tglServerTgl;
    // End of variables declaration//GEN-END:variables
}